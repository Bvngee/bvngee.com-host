{
  description = "All things related to bvngeecord.com (mostly containerized stuff)";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # An alternative to nixpkgs' dockerTools. Includes a buildImage function that
    # doesn't copy full tarballs to the nix store but rather uses a patched Skopeo
    # to send layers/images to any destination using a JSON format generated by the
    # provided nix2container binary. See https://github.com/nlewo/nix2container
    # Note:
    # the nix2container output contains dockerTools-like nix functions, and
    # the nix2container-bin output contains the go binary used in those functions
    nix2container.url = "github:nlewo/nix2container";
    nix2container.inputs.nixpkgs.follows = "nixpkgs";

    acme-sh.url = "github:acmesh-official/acme.sh";
    acme-sh.flake = false;
  };

  outputs = { nixpkgs, ... }@inputs:
    let
      supportedSystems = [ "x86_64-linux" "x86_64-darwin" "aarch64-linux" "aarch64-darwin" ];
      forAllSystems = fn:
        nixpkgs.lib.genAttrs supportedSystems (system: fn nixpkgs.legacyPackages.${system});

    in
    {
      packages = forAllSystems (pkgs:
        let
          nix2container = inputs.nix2container.packages.${pkgs.system}.nix2container;
        in
        rec {
          github-readme-stats = pkgs.callPackage ./pkgs/github-readme-stats { };

          containers = {
            github-readme-stats = pkgs.callPackage ./containers/github-readme-stats/default.nix {
              inherit nix2container github-readme-stats;
            };
            webhook = pkgs.callPackage ./containers/webhook/default.nix { inherit nix2container; };
            bvngee-com-proxy = pkgs.callPackage ./containers/bvngee.com-proxy/default.nix { inherit nix2container; };
            acme-sh = pkgs.callPackage ./containers/acme.sh/default.nix {
              inherit nix2container;
              inherit (inputs) acme-sh;
            };
          };
        });
    };
}
